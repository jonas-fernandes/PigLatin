{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Documents/PigLatinWhatever/Challenge-Pig-Latin-React/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // the state object holds information that can be displayed to the user and updated throughout the program\n\n    this.myPigLatinCodeHere = () => {\n      // the variable 'userInput' will contain the text input from the user\n      // no need to change this variable\n      let userInput = this.state.phrase; // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n      // no need to change this variable\n\n      let translatedWordsArray = []; // taking the user input and spliting the text into an array of words\n\n      let splitUserInput = userInput.toLowerCase().split(\" \"); // now that we have an array of words, we can map over the array and access each word\n\n      let vowelList = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n      splitUserInput.map(currentWord => {\n        // ACTION ITEM: use 'currentWord' as a starting point for your code\n        ////  ===  ===  ===  ===  ===  ===\n\n        /*\n                - Vowels\n                currentWord += \"way\"\n                - Consonants\n                currentWord = \"move consonants up to the first vowel to the end of the word and then add \"ay\" at the end.\"\n                - Special:\n                    - \"qu\" same as consanants but after \"qu\"\n        */\n        ////  ===  ===  ===  ===  ===  ===\n        // this.findFirstConsonants (vowelList, currentWord)\n        // console.log(this.vowelWord (vowelList, currentWord))\n        //console.log(this.findFirstConsonants(vowelList, currentWord))\n        if (this.checkStartVowel(vowelList, wordIn)) {\n          translatedWordsArray.push(wordIn + \"way\");\n        } else {\n          return findFirstConsonants(vowelList, currentWord);\n        } // \"every\"  -->  currentWord --> function() -->  wordIn\n        // logically wordIn = \"every\"\n        // your code here!\n        // if (currentWord.charAt(0))\n        //stringIn.split(\"\").filter(letter => vowelsList.indexOf(letter.toLowerCase()) < 0 ).join(\"\")\n        // Remember: console.log is your friend :)\n        // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n\n\n        return translatedWordsArray.push(currentWord);\n      }); // joining the array back to a string of translated words\n      // no need to change this variable\n\n      let translatedWords = translatedWordsArray.join(\" \"); // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n      // no need to change this method\n\n      this.setState({\n        phraseTranslated: translatedWords\n      }); // done!\n    };\n\n    this.vowelWord = (vowelList, wordIn) => {\n      for (let i = 0; i < vowelList.length; i++) {\n        if (vowelList[i] === wordIn.charAt(0)) {\n          return wordIn + \"way\";\n        }\n      }\n\n      return wordIn;\n    };\n\n    this.checkStartVowel = (vowelList, wordIn) => {\n      let outputValue = false;\n\n      for (let i = 0; i < vowelList.length; i++) {\n        if (vowelList[i] === wordIn.charAt(0)) {\n          outputValue = true;\n        }\n      }\n\n      return outputValue;\n    };\n\n    this.findFirstConsonants = (vowelList, wordIn) => {\n      //for (let i = 0; i < vowelList.length; i++) {\n      //if() // check to see if word begins with vowel\n      // if so, return the word as is (or return it through a the pigLatinVowel function (not defined yet))\n      //split vowel functions into 2 functions\n      // - 1.  returns 'true' or 'false' if word begins with a vowel\n      // - 2.  converts the 'vowel word' into piglatin\n      for (let Li = 0; Li < wordIn.length; Li++) {\n        for (let vi = 0; vi < vowelList.length; vi++) {\n          if (wordIn.charAt(Li) === vowelList[vi]) {\n            let outputWord = \"\";\n            outputWord += wordIn.substr(Li);\n            outputWord += wordIn.substring(0, Li);\n            outputWord += \"ay\";\n            return outputWord; //substring(0, 2);\n          }\n        }\n      } //wordIn.charAt(i)\n      // if (vowelList[i] === wordIn.charAt(0)){\n      //     //return\n      //     let outputWord = \"\"\n      //     outputWord += wordIn.substr(1)\n      //     outputWord += wordIn.charAt(0)\n      //     outputWord += \"way\"\n      //\n      //     console.log(outputWord)\n      // }\n\n\n      return wordIn;\n    };\n\n    this.setUpPreventDefault = e => {\n      // this method prevents react from refreshing the page unnecessarily\n      // no need to modify this method\n      e.preventDefault();\n      this.myPigLatinCodeHere();\n    };\n\n    this.handleChange = e => {\n      // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n      // no need to modify this method\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.restartGame = () => {\n      // this method restarts the game by setting the original state\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n      this.setState({\n        phrase: 'through every squeal queen fry',\n        phraseTranslated: 'This is where your translated sentence will appear.'\n      });\n    };\n\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: 'every through yummy squeal queen fry',\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    };\n  } // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Pig Latin Translator\"), React.createElement(\"div\", {\n      id: \"pigImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\",\n      alt: \"pig with butcher cut names in pig latin\",\n      id: \"butcherPig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Enter phrase to be translated:\"), React.createElement(\"div\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"inputPhrase\",\n      onChange: this.handleChange,\n      value: this.state.phrase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setUpPreventDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Clear\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, this.state.phraseTranslated)), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Coded by ~your name here~\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learn/Documents/PigLatinWhatever/Challenge-Pig-Latin-React/src/App.js"],"names":["React","App","Component","constructor","props","myPigLatinCodeHere","userInput","state","phrase","translatedWordsArray","splitUserInput","toLowerCase","split","vowelList","map","currentWord","checkStartVowel","wordIn","push","findFirstConsonants","translatedWords","join","setState","phraseTranslated","vowelWord","i","length","charAt","outputValue","Li","vi","outputWord","substr","substring","setUpPreventDefault","e","preventDefault","handleChange","target","value","restartGame","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: 'every through yummy squeal queen fry',\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    }\n  }\n\n  // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n\n\n  myPigLatinCodeHere = () => {\n    // the variable 'userInput' will contain the text input from the user\n    // no need to change this variable\n    let userInput = this.state.phrase\n\n    // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n    // no need to change this variable\n    let translatedWordsArray = []\n\n    // taking the user input and spliting the text into an array of words\n    let splitUserInput = userInput.toLowerCase().split(\" \")\n\n    // now that we have an array of words, we can map over the array and access each word\n    let vowelList = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    splitUserInput.map(currentWord => {\n      // ACTION ITEM: use 'currentWord' as a starting point for your code\n\n      ////  ===  ===  ===  ===  ===  ===\n/*\n        - Vowels\n        currentWord += \"way\"\n        - Consonants\n        currentWord = \"move consonants up to the first vowel to the end of the word and then add \"ay\" at the end.\"\n        - Special:\n            - \"qu\" same as consanants but after \"qu\"\n*/\n      ////  ===  ===  ===  ===  ===  ===\n      // this.findFirstConsonants (vowelList, currentWord)\n      // console.log(this.vowelWord (vowelList, currentWord))\n\n      //console.log(this.findFirstConsonants(vowelList, currentWord))\n\n      if(this.checkStartVowel(vowelList,wordIn)){\n          translatedWordsArray.push( wordIn + \"way\" )\n      }\n      else{\n          return findFirstConsonants(vowelList, currentWord)\n      }\n\n\n\n      // \"every\"  -->  currentWord --> function() -->  wordIn\n      // logically wordIn = \"every\"\n\n      // your code here!\n      // if (currentWord.charAt(0))\n\n      //stringIn.split(\"\").filter(letter => vowelsList.indexOf(letter.toLowerCase()) < 0 ).join(\"\")\n\n      // Remember: console.log is your friend :)\n\n\n      // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n      return translatedWordsArray.push(currentWord)\n    })\n\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \")\n\n    // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({ phraseTranslated: translatedWords })\n    // done!\n  }\n\n  vowelWord = (vowelList,wordIn) => {\n      for (let i = 0; i < vowelList.length; i++) {\n          if (vowelList[i] === wordIn.charAt(0)){\n              return wordIn + \"way\"\n          }\n      }\n      return wordIn\n  }\n\n\n  checkStartVowel = (vowelList,wordIn) =>{\n      let outputValue = false;\n      for (let i = 0; i < vowelList.length; i++) {\n          if (vowelList[i] === wordIn.charAt(0)){\n              outputValue = true\n          }\n      }\n      return outputValue\n  }\n\n\n  findFirstConsonants = (vowelList,wordIn) => {\n      //for (let i = 0; i < vowelList.length; i++) {\n\n      //if() // check to see if word begins with vowel\n            // if so, return the word as is (or return it through a the pigLatinVowel function (not defined yet))\n\n            //split vowel functions into 2 functions\n                // - 1.  returns 'true' or 'false' if word begins with a vowel\n                // - 2.  converts the 'vowel word' into piglatin\n\n\n      for (let Li = 0; Li < wordIn.length; Li++) {\n          for (let vi = 0; vi < vowelList.length; vi++) {\n              if (wordIn.charAt(Li) === vowelList[vi]){\n\n                  let outputWord = \"\"\n                  outputWord += wordIn.substr(Li)\n                  outputWord += wordIn.substring(0,Li)\n                  outputWord += \"ay\"\n                  return outputWord\n                  //substring(0, 2);\n\n              }\n          }\n      }\n          //wordIn.charAt(i)\n\n\n          // if (vowelList[i] === wordIn.charAt(0)){\n          //     //return\n          //     let outputWord = \"\"\n          //     outputWord += wordIn.substr(1)\n          //     outputWord += wordIn.charAt(0)\n          //     outputWord += \"way\"\n          //\n          //     console.log(outputWord)\n          // }\n      return wordIn\n  }\n\n\n  setUpPreventDefault = (e) => {\n    // this method prevents react from refreshing the page unnecessarily\n    // no need to modify this method\n    e.preventDefault()\n    this.myPigLatinCodeHere()\n  }\n\n  handleChange = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    // no need to modify this method\n    this.setState({ phrase: e.target.value })\n  }\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: 'through every squeal queen fry',\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    })\n  }\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return (\n      <div>\n        <h1>Pig Latin Translator</h1>\n          <div id=\"pigImage\">\n            <img\n              src=\"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\"\n              alt=\"pig with butcher cut names in pig latin\"\n              id=\"butcherPig\"\n            />\n          </div>\n          <div className=\"box\">\n            <h4>Enter phrase to be translated:</h4>\n            <div className=\"info\">\n            {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n              <input\n                id=\"inputPhrase\"\n                onChange={ this.handleChange }\n                value={ this.state.phrase }\n              />\n              <br />\n              {/* button that called the setUpPreventDefault method */}\n              <button onClick={ this.setUpPreventDefault }>Submit</button>\n              {/* button that resets the game */}\n              <button onClick={ this.restartGame }>Clear</button>\n            </div>\n            {/* where the translated phrase will display */}\n            <p>{ this.state.phraseTranslated }</p>\n          </div>\n        <footer>\n          Coded by ~your name here~\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}